# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "asset_id"}, {"type": "uint64", "name": "asa_id"}, {"type": "uint64", "name": "total_supply"}, {"type": "uint64", "name": "base_price"}, {"type": "address", "name": "publisher"}, {"type": "uint64", "name": "algo_seed"}], "name": "insert_asset", "returns": {"type": "bool"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "asset_id"}, {"type": "uint64", "name": "amount"}, {"type": "address", "name": "buyer"}, {"type": "uint64", "name": "payment"}], "name": "buy", "returns": {"type": "bool"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "asset_id"}, {"type": "uint64", "name": "amount"}, {"type": "address", "name": "seller"}], "name": "sell", "returns": {"type": "bool"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "asset_id"}, {"type": "uint64", "name": "user_balance"}, {"type": "address", "name": "user"}], "name": "claim_royalty", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "asset_id"}, {"type": "uint64", "name": "hype_factor"}, {"type": "uint64", "name": "new_price"}, {"type": "uint64", "name": "new_stream_value"}, {"type": "uint64", "name": "current_round"}], "name": "set_hype_price", "returns": {"type": "bool"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "asset_id"}], "name": "get_asset_info", "returns": {"type": "(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64)", "struct": "AssetInfo"}, "events": [], "readonly": false, "recommendations": {}}], "name": "MFTGala", "state": {"keys": {"box": {}, "global": {}, "local": {}}, "maps": {"box": {"assets": {"keyType": "uint64", "valueType": "AssetInfo", "prefix": "YXNzZXRz"}, "royalty_vault": {"keyType": "uint64", "valueType": "uint64", "prefix": "cm95YWx0eV92YXVsdA=="}, "creator_balance": {"keyType": "address", "valueType": "uint64", "prefix": "Y3JlYXRvcl9iYWxhbmNl"}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 0}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"AssetInfo": [{"name": "price", "type": "uint64"}, {"name": "algo_liquidity", "type": "uint64"}, {"name": "token_liquidity", "type": "uint64"}, {"name": "total_supply", "type": "uint64"}, {"name": "creator", "type": "address"}, {"name": "asa_id", "type": "uint64"}, {"name": "hype_factor", "type": "uint64"}, {"name": "last_stream_value", "type": "uint64"}, {"name": "last_update_round", "type": "uint64"}]}, "byteCode": {"approval": "CiAEAAFkCCYGBBUffHUGYXNzZXRzAQAIAAAAAAAAAAANcm95YWx0eV92YXVsdAgAAAAAAAAAATEbQQDpggYEHWPGiASjgyYqBAVNQDgEfwkG/AS/qGU4BNcnCqQ2GgCOBgCRAHAAUgA5ABUAAiJDMRkURDEYRDYaAYgCaShMULAjQzEZFEQxGEQ2GgE2GgI2GgM2GgQ2GgWIAi0qIk8CVChMULAjQzEZFEQxGEQ2GgE2GgI2GgOIAeMoTFCwI0MxGRREMRhENhoBNhoCNhoDiAFKKiJPAlQoTFCwI0MxGRREMRhENhoBNhoCNhoDNhoEiABnKiJPAlQoTFCwI0MxGRREMRhENhoBNhoCNhoDNhoENhoFNhoGiAAWKiJPAlQoTFCwI0MxGUD/QzEYFEQjQ4oGAYv9i/9Qi/xQi/xQi/5Qi/tQJwVQK1ArUCmL+lBMvycEi/pQK78jiYoEASKAACmL/FBJvkxJTwJESSJbi/0XSU4DC0yBSFsLFov/F0lPAhcMQQAEIowAiYsDVxAIi/2kQQAEIowAiYsFSYFQCyQKSwGBCgskCk8CSwIJSwEJjAGLA0mBEFuLBAkWXBBJJVtPAwgWXAhJjAMnBIv8UEm+RBdPAwgWv1cgIIAPY3JlYXRvcl9iYWxhbmNlTFBJjAC9RQFBACGLAL5EF4sBCBaLAEy/iwNJIltJJAoIFlwAiwJMvyOMAIkrQv/figMBgABJKYv9UEm+TElPAkRJgRBbi/4XSU4DCElPAoEYWw1BAAQijACJiwNJIluLBAtJjABMJVsNQQAEIowAiYsFFosDTFwQSSVbiwAJFlwISYwDIltJJAoJSYwBIwxBABGLAycFXACMA4sCiwO/I4wAiYsBFosDTFwAjANC/+qKAwEnBIv9UEm+RCmL/VC+REwXi/4XSwELTwKBGFsKFkkXTwJMCRZPAky/iYoFASmL+1BJvkSL/FxIi/1cAIv+XFCL/1xYvyOJigEBKYv/UL5EiQ==", "clear": "CoEBQw=="}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [396, 472], "errorMessage": "Index access is out of bounds"}, {"pc": [114, 133, 169, 194, 224, 257], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [301], "errorMessage": "can only call when creating"}, {"pc": [117, 136, 172, 197, 227, 260], "errorMessage": "can only call when not creating"}, {"pc": [362, 556, 684, 721, 749], "errorMessage": "check self.assets entry exists"}, {"pc": [506], "errorMessage": "check self.creator_balance entry exists"}, {"pc": [465, 678], "errorMessage": "check self.royalty_vault entry exists"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class AssetInfo:
    """Struct for AssetInfo"""
    price: int
    algo_liquidity: int
    token_liquidity: int
    total_supply: int
    creator: str
    asa_id: int
    hype_factor: int
    last_stream_value: int
    last_update_round: int


@dataclasses.dataclass(frozen=True, kw_only=True)
class InsertAssetArgs:
    """Dataclass for insert_asset arguments"""
    asset_id: int
    asa_id: int
    total_supply: int
    base_price: int
    publisher: str
    algo_seed: int

    @property
    def abi_method_signature(self) -> str:
        return "insert_asset(uint64,uint64,uint64,uint64,address,uint64)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BuyArgs:
    """Dataclass for buy arguments"""
    asset_id: int
    amount: int
    buyer: str
    payment: int

    @property
    def abi_method_signature(self) -> str:
        return "buy(uint64,uint64,address,uint64)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SellArgs:
    """Dataclass for sell arguments"""
    asset_id: int
    amount: int
    seller: str

    @property
    def abi_method_signature(self) -> str:
        return "sell(uint64,uint64,address)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ClaimRoyaltyArgs:
    """Dataclass for claim_royalty arguments"""
    asset_id: int
    user_balance: int
    user: str

    @property
    def abi_method_signature(self) -> str:
        return "claim_royalty(uint64,uint64,address)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetHypePriceArgs:
    """Dataclass for set_hype_price arguments"""
    asset_id: int
    hype_factor: int
    new_price: int
    new_stream_value: int
    current_round: int

    @property
    def abi_method_signature(self) -> str:
        return "set_hype_price(uint64,uint64,uint64,uint64,uint64)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetAssetInfoArgs:
    """Dataclass for get_asset_info arguments"""
    asset_id: int

    @property
    def abi_method_signature(self) -> str:
        return "get_asset_info(uint64)(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64)"


class MftGalaParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def insert_asset(
        self,
        args: tuple[int, int, int, int, str, int] | InsertAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "insert_asset(uint64,uint64,uint64,uint64,address,uint64)bool",
            "args": method_args,
        }))

    def buy(
        self,
        args: tuple[int, int, str, int] | BuyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buy(uint64,uint64,address,uint64)bool",
            "args": method_args,
        }))

    def sell(
        self,
        args: tuple[int, int, str] | SellArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "sell(uint64,uint64,address)bool",
            "args": method_args,
        }))

    def claim_royalty(
        self,
        args: tuple[int, int, str] | ClaimRoyaltyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_royalty(uint64,uint64,address)uint64",
            "args": method_args,
        }))

    def set_hype_price(
        self,
        args: tuple[int, int, int, int, int] | SetHypePriceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_hype_price(uint64,uint64,uint64,uint64,uint64)bool",
            "args": method_args,
        }))

    def get_asset_info(
        self,
        args: tuple[int] | GetAssetInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_asset_info(uint64)(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class MftGalaCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def insert_asset(
        self,
        args: tuple[int, int, int, int, str, int] | InsertAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "insert_asset(uint64,uint64,uint64,uint64,address,uint64)bool",
            "args": method_args,
        }))

    def buy(
        self,
        args: tuple[int, int, str, int] | BuyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buy(uint64,uint64,address,uint64)bool",
            "args": method_args,
        }))

    def sell(
        self,
        args: tuple[int, int, str] | SellArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "sell(uint64,uint64,address)bool",
            "args": method_args,
        }))

    def claim_royalty(
        self,
        args: tuple[int, int, str] | ClaimRoyaltyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_royalty(uint64,uint64,address)uint64",
            "args": method_args,
        }))

    def set_hype_price(
        self,
        args: tuple[int, int, int, int, int] | SetHypePriceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_hype_price(uint64,uint64,uint64,uint64,uint64)bool",
            "args": method_args,
        }))

    def get_asset_info(
        self,
        args: tuple[int] | GetAssetInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_asset_info(uint64)(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class MftGalaSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def insert_asset(
        self,
        args: tuple[int, int, int, int, str, int] | InsertAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "insert_asset(uint64,uint64,uint64,uint64,address,uint64)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def buy(
        self,
        args: tuple[int, int, str, int] | BuyArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buy(uint64,uint64,address,uint64)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def sell(
        self,
        args: tuple[int, int, str] | SellArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "sell(uint64,uint64,address)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def claim_royalty(
        self,
        args: tuple[int, int, str] | ClaimRoyaltyArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_royalty(uint64,uint64,address)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def set_hype_price(
        self,
        args: tuple[int, int, int, int, int] | SetHypePriceArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_hype_price(uint64,uint64,uint64,uint64,uint64)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def get_asset_info(
        self,
        args: tuple[int] | GetAssetInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[AssetInfo]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_asset_info(uint64)(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(AssetInfo, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[AssetInfo], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class MftGalaState:
    """Methods to access state for the current MFTGala app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "AssetInfo": AssetInfo
        }

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def assets(self) -> "_MapState[int, AssetInfo]":
        """Get values from the assets map in box state"""
        return _MapState(
            self.app_client.state.box,
            "assets",
            self._struct_classes.get("AssetInfo")
        )

    @property
    def royalty_vault(self) -> "_MapState[int, int]":
        """Get values from the royalty_vault map in box state"""
        return _MapState(
            self.app_client.state.box,
            "royalty_vault",
            None
        )

    @property
    def creator_balance(self) -> "_MapState[str, int]":
        """Get values from the creator_balance map in box state"""
        return _MapState(
            self.app_client.state.box,
            "creator_balance",
            None
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class MftGalaClient:
    """Client for interacting with MFTGala smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = MftGalaParams(self.app_client)
        self.create_transaction = MftGalaCreateTransactionParams(self.app_client)
        self.send = MftGalaSend(self.app_client)
        self.state = MftGalaState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "MftGalaClient":
        return MftGalaClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "MftGalaClient":
        return MftGalaClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "MftGalaClient":
        return MftGalaClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "MftGalaComposer":
        return MftGalaComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["insert_asset(uint64,uint64,uint64,uint64,address,uint64)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["buy(uint64,uint64,address,uint64)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["sell(uint64,uint64,address)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["claim_royalty(uint64,uint64,address)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_hype_price(uint64,uint64,uint64,uint64,uint64)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_asset_info(uint64)(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> AssetInfo | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | AssetInfo | bool | int:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class MftGalaBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating MftGala contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class MftGalaFactory(algokit_utils.TypedAppFactoryProtocol[MftGalaBareCallCreateParams, None, None]):
    """Factory for deploying and managing MftGalaClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = MftGalaFactoryParams(self.app_factory)
        self.create_transaction = MftGalaFactoryCreateTransaction(self.app_factory)
        self.send = MftGalaFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: MftGalaBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[MftGalaClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return MftGalaClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> MftGalaClient:
        """Get an app client by creator address and name"""
        return MftGalaClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> MftGalaClient:
        """Get an app client by app ID"""
        return MftGalaClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class MftGalaFactoryParams:
    """Parameters for creating transactions for MftGala contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = MftGalaFactoryCreateParams(app_factory)
        self.update = MftGalaFactoryUpdateParams(app_factory)
        self.delete = MftGalaFactoryDeleteParams(app_factory)

class MftGalaFactoryCreateParams:
    """Parameters for 'create' operations of MftGala contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def insert_asset(
        self,
        args: tuple[int, int, int, int, str, int] | InsertAssetArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the insert_asset(uint64,uint64,uint64,uint64,address,uint64)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "insert_asset(uint64,uint64,uint64,uint64,address,uint64)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def buy(
        self,
        args: tuple[int, int, str, int] | BuyArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the buy(uint64,uint64,address,uint64)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "buy(uint64,uint64,address,uint64)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def sell(
        self,
        args: tuple[int, int, str] | SellArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the sell(uint64,uint64,address)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "sell(uint64,uint64,address)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def claim_royalty(
        self,
        args: tuple[int, int, str] | ClaimRoyaltyArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the claim_royalty(uint64,uint64,address)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "claim_royalty(uint64,uint64,address)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_hype_price(
        self,
        args: tuple[int, int, int, int, int] | SetHypePriceArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_hype_price(uint64,uint64,uint64,uint64,uint64)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_hype_price(uint64,uint64,uint64,uint64,uint64)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_asset_info(
        self,
        args: tuple[int] | GetAssetInfoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_asset_info(uint64)(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_asset_info(uint64)(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class MftGalaFactoryUpdateParams:
    """Parameters for 'update' operations of MftGala contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class MftGalaFactoryDeleteParams:
    """Parameters for 'delete' operations of MftGala contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class MftGalaFactoryCreateTransaction:
    """Create transactions for MftGala contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = MftGalaFactoryCreateTransactionCreate(app_factory)


class MftGalaFactoryCreateTransactionCreate:
    """Create new instances of MftGala contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class MftGalaFactorySend:
    """Send calls to MftGala contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = MftGalaFactorySendCreate(app_factory)


class MftGalaFactorySendCreate:
    """Send create calls to MftGala contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[MftGalaClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return MftGalaClient(result[0]), result[1]


class MftGalaComposer:
    """Composer for creating transaction groups for MftGala contract calls"""

    def __init__(self, client: "MftGalaClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def insert_asset(
        self,
        args: tuple[int, int, int, int, str, int] | InsertAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "MftGalaComposer":
        self._composer.add_app_call_method_call(
            self.client.params.insert_asset(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "insert_asset(uint64,uint64,uint64,uint64,address,uint64)bool", v
            )
        )
        return self

    def buy(
        self,
        args: tuple[int, int, str, int] | BuyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "MftGalaComposer":
        self._composer.add_app_call_method_call(
            self.client.params.buy(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "buy(uint64,uint64,address,uint64)bool", v
            )
        )
        return self

    def sell(
        self,
        args: tuple[int, int, str] | SellArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "MftGalaComposer":
        self._composer.add_app_call_method_call(
            self.client.params.sell(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "sell(uint64,uint64,address)bool", v
            )
        )
        return self

    def claim_royalty(
        self,
        args: tuple[int, int, str] | ClaimRoyaltyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "MftGalaComposer":
        self._composer.add_app_call_method_call(
            self.client.params.claim_royalty(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "claim_royalty(uint64,uint64,address)uint64", v
            )
        )
        return self

    def set_hype_price(
        self,
        args: tuple[int, int, int, int, int] | SetHypePriceArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "MftGalaComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_hype_price(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_hype_price(uint64,uint64,uint64,uint64,uint64)bool", v
            )
        )
        return self

    def get_asset_info(
        self,
        args: tuple[int] | GetAssetInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "MftGalaComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_asset_info(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_asset_info(uint64)(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64)", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "MftGalaComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "MftGalaComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
